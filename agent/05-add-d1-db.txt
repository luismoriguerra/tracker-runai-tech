

1. Create d1 in cloudflare
```
npx wrangler d1 create remodeling-tracker-db
```

2. Update wrangler.toml  with the generated id from terminal
```
[[d1_databases]]
binding = "DB"
database_name = "remodeling-tracker-db"
database_id = "<id>"
```

3. Create first migration
```
npx wrangler d1 migrations create remodeling-tracker-db create_settings_table
```

4. Add Create Settings Table in generated migration file 
file: migrations/0001_create_settings_table.sql
```

CREATE TABLE settings (
    id TEXT PRIMARY KEY,
    user_id TEXT NOT NULL,
    key TEXT NOT NULL,
    value TEXT NOT NULL
);

```

5. Apply migration locally
```
npx wrangler d1 migrations apply remodeling-tracker-db --local
```

6. Add d1 typings 
env.d.ts
```
// Generated by Wrangler
// by running `wrangler types --env-interface CloudflareEnv env.d.ts`

interface CloudflareEnv {
  DB: D1Database;
}
```

6. Create a d1 services file to use d1 database
file: server/services/d1.ts
```
/* eslint-disable @typescript-eslint/no-explicit-any */
import { getRequestContext } from "@cloudflare/next-on-pages";

export const runtime = "edge";

export function getDb() {
  return getRequestContext().env.DB;
}

export async function executeQuery<T>(query: string, bind: any[] = []) {
  const db = getDb();
  const stmt = db.prepare(query).bind(...bind);
  const { results } = await stmt.all<T>();
  return results;
}

export async function runQuery<T>(query: string, bind: any[] = []) {
  const db = getDb();
  const stmt = db.prepare(query).bind(...bind);
  const { results } = await stmt.run<T>();
  return results;
} 
```

7. Add d1 services file to server/infrastructure/index.ts
```
export * from "./d1";
```

8. Create API CRUD for settings
routes:
- GET /api/settings
- POST /api/settings
- PUT /api/settings/:id
- DELETE /api/settings/:id

info: for getting user_id use 
```
import { getSession } from '@auth0/nextjs-auth0/edge';

  const session = await getSession();
  const userId = session?.user.sub;
```

9. create a api-test.http file to test the api
file: api-test.http
```


@token=appSession=abc

###
Get http://localhost:3000/api/health
Cookie: {{token}}
###
Get http://localhost:3000/api/private
Cookie: {{token}}

###
Get http://localhost:3000/api/settings
Cookie: {{token}}


###
POST http://localhost:3000/api/settings
Cookie: {{token}}

{
    "key": "test",
    "value": "test"
}

###
@keyId=xyz
Put http://localhost:3000/api/settings/{{keyId}}
Cookie: {{token}}

{
    "key": "test2",
    "value": "test2"
}

###
Delete http://localhost:3000/api/settings/{{keyId}}
Cookie: {{token}}
```